// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces
import XCTest
@testable import ArkanaKeys

final class ArkanaKeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: ArkanaKeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0xa5, 0xce, 0xa8, 0x44, 0x68, 0x20, 0xd1, 0xac, 0x57, 0x48, 0x8d, 0xe2, 0xf3, 0x7d, 0x97, 0x57, 0x85, 0xc4, 0xf5, 0xcb, 0xff, 0x29, 0xef, 0x20, 0xe2, 0x49, 0x2b, 0x4d, 0xb4, 0x5c, 0xd9, 0xbe, 0xd1, 0x45, 0xdc, 0x85, 0x8b, 0x4a, 0xce, 0xc7, 0xd, 0x6f, 0x22, 0xa4, 0x93, 0x5f, 0x1, 0x32, 0xb, 0x1, 0xf0, 0x42, 0xfd, 0x51, 0, 0xd9, 0x7f, 0x1e, 0xbb, 0x60, 0x23, 0xd3, 0x9f, 0x10
        ]
        globalSecrets = ArkanaKeys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x97, 0xf7, 0xce, 0x7c, 0x50, 0x16, 0xe0, 0x9e, 0x65, 0x78, 0xee, 0xd4, 0xc1, 0x44, 0xf5, 0x66, 0xb2, 0xf5, 0xc1, 0xae, 0x9a, 0x1e, 0xda, 0x10, 0xd2, 0x71, 0x4d, 0x2b, 0x83, 0x38, 0xeb, 0xdd, 0xb4, 0x7d, 0xb8, 0xe3, 0xed, 0x2b, 0xfa, 0xfe, 0x3d, 0xc, 0x16, 0xc2, 0xf6, 0x6a, 0x38, 0x3, 0x6f, 0x67, 0x92, 0x7b, 0x99, 0x64, 0x31, 0xe0, 0x19, 0x2c, 0xd9, 0x1, 0x41, 0xe6, 0xa9, 0x22, 0x95, 0xf6, 0xcb, 0x72, 0xc, 0x46, 0xe6, 0xc8, 0x60, 0x71, 0xba, 0x84, 0xc0, 0x1e, 0xf3, 0x6f, 0xbd, 0xfc, 0xcc, 0xad, 0xcd, 0x4b, 0xdb, 0x11, 0xd2, 0x71, 0x13, 0x7b, 0x85, 0x39, 0xed, 0x89, 0xb7, 0x23, 0xb9, 0xbc, 0xe9, 0x2c, 0xf8, 0xf3, 0x34, 0x59, 0x14, 0xc2, 0xa4, 0x39, 0x65, 0x6, 0x3d, 0x60, 0xc5, 0x75, 0x9f, 0x34, 0x38, 0xbd, 0x4d, 0x7f, 0x8d, 0x54, 0x17, 0xe6, 0xaa, 0x21
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "29f8861220c629b1714ee75008ff7d2ce8dffa490c4fe591dfb9d519f2bab56208c6df7d797f3cd8889f2b4108861e47ffe9bf64966f7fd46a57be8d2a644551")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0xfd, 0xa0, 0xc9, 0x34, 0x5, 0x7a, 0xb9, 0xe2, 0x36, 0x7e, 0xfb, 0x93, 0xa9, 0x7, 0xe1, 0x1b, 0xdf, 0xa6, 0xbe, 0x99, 0xaa, 0x42, 0x9c, 0x77, 0xb3, 0, 0x78, 0x74, 0xf2, 0x28, 0x9a, 0x87, 0xbd, 0xd, 0xef, 0xb6, 0xf3, 0x3b, 0xa8, 0x97, 0x63, 0x3a, 0x6b, 0xcb, 0xfc, 0x19, 0x54, 0x64, 0x64, 0x51, 0xc4, 0x71, 0x88, 0x19, 0x33, 0xef, 0x2b, 0x59, 0xd5, 0x52, 0x60, 0xa5, 0xab, 0x64, 0xc0, 0xbc, 0xf9, 0x15, 0x5, 0x63, 0x90, 0xda, 0x3b, 0x10, 0xf4, 0xa7, 0xb9, 0x24, 0xfe, 0x33, 0xec, 0xaa, 0x81, 0xf8, 0xcb, 0x68, 0xd2, 0x1d
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "XnapmZhNa6vqZzvLZbKRUksWQIS9FtC9lH33xqfPnUIooFUVoP43uH36TGn2Cv4terQQmCAvlXyEJYidint34A==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0xc3, 0xaf, 0xce, 0x7d, 0xb, 0x15, 0xe7, 0xc8, 0x7a, 0x79, 0xbc, 0xd1, 0x95, 0x50, 0xa3, 0x34, 0xbc, 0xf4, 0xd8, 0xa9, 0x9d, 0x1c, 0xde, 0xd, 0xd3, 0x28, 0x1e, 0x7d, 0xd2, 0x68, 0xba, 0x8f, 0xe0, 0x27, 0xb9, 0xbc
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "faf9c56d-113f-4c90-bb51-1a50f4c11be9")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xd1, 0xbc, 0xdd, 0x21
        ]
        XCTAssertTrue(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xc3, 0xaf, 0xc4, 0x37, 0xd
        ]
        XCTAssertFalse(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x91, 0xfc
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_decodeIntValueWithLeadingZeroes_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x95, 0xfe, 0x98, 0x75
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "0001")
    }

    func test_decodeMassiveIntValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x9c, 0xfc, 0x9a, 0x77, 0x5b, 0x17, 0xe3, 0x9c, 0x64, 0x7e, 0xb5, 0xd7, 0xc7, 0x4a, 0xa0, 0x62, 0xbd, 0xf4, 0xc2, 0xf2, 0xcd, 0x1b, 0xdc, 0x13, 0xd5, 0x7b, 0x1b, 0x7e, 0x82, 0x64, 0xec, 0x8a, 0xe6, 0x72, 0xe9, 0xbd, 0xbb, 0x7d
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "92233720368547758079223372036854775807")
    }

    func test_decodeNegativeIntValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x88, 0xfa, 0x9a
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "-42")
    }

    func test_decodeFloatingPointValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x96, 0xe0, 0x99, 0x70
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "3.14")
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0xd7, 0xab, 0xc9, 0x28, 0x37, 0x4, 0xbd, 0xc5, 0x3a, 0x17, 0xfe, 0x8a, 0x92, 0x19, 0xee
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }
}
