// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces
import XCTest
@testable import ArkanaKeys

final class ArkanaKeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: ArkanaKeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0x77, 0xbd, 0xce, 0x1b, 0xe, 0x7, 0x56, 0xc0, 0xd2, 0x64, 0x6d, 0x8b, 0x4, 0x14, 0x78, 0xc, 0x62, 0x49, 0xf7, 0xf9, 0x27, 0xa6, 0xc6, 0xbf, 0xd1, 0x5f, 0x63, 0x91, 0xa1, 0x54, 0x88, 0x57, 0xba, 0x27, 0xd0, 0x49, 0xc, 0xf2, 0xf4, 0x7, 0x78, 0x61, 0xde, 0x6b, 0x73, 0x6a, 0xd, 0x12, 0x25, 0x5a, 0xe0, 0x9e, 0xb7, 0xbf, 0x39, 0xb0, 0xe9, 0xe9, 0x16, 0xae, 0x56, 0x1e, 0x89, 0x66
        ]
        globalSecrets = ArkanaKeys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x15, 0xdc, 0xf9, 0x79, 0x6a, 0x65, 0x32, 0xf9, 0xe7, 0x5, 0x8, 0xe8, 0x35, 0x27, 0x48, 0x69, 0x7, 0x71, 0x96, 0xc0, 0x16, 0x94, 0xff, 0x8b, 0xe5, 0x67, 0x5b, 0xa3, 0x93, 0x35, 0xb8, 0x66, 0x8d, 0x10, 0xe4, 0x7c, 0x3f, 0x91, 0xcc, 0x62, 0x4f, 0x59, 0xef, 0x5a, 0x16, 0x5c, 0x6b, 0x27, 0x15, 0x6f, 0x82, 0xad, 0xd3, 0xdd, 0x1, 0xd5, 0x8c, 0x8c, 0x2e, 0x96, 0x65, 0x7f, 0xec, 0x55, 0x4e, 0x88, 0xf6, 0x78, 0x36, 0x61, 0x60, 0xf7, 0xe3, 0x7, 0xb, 0xee, 0x60, 0x2d, 0x41, 0x68, 0x5b, 0x79, 0x96, 0x9a, 0x15, 0xc7, 0xf6, 0x8c, 0xe8, 0x6a, 0x5, 0xa9, 0x90, 0x64, 0xea, 0x32, 0x89, 0x41, 0xe5, 0x2d, 0x6e, 0xc2, 0x92, 0x62, 0x4b, 0x3, 0xeb, 0x5a, 0x45, 0x5c, 0x34, 0x22, 0x44, 0x39, 0xd0, 0xfd, 0xd6, 0xda, 0x8, 0xd6, 0xde, 0xdc, 0x20, 0xc8, 0x6e, 0x2f, 0xef, 0x5e
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "ba7bdbd95aec130ee8a9129448822a0177453c8e7811e6f505b3db8eee883ae3958c8f671cfed99d90ac2a0395f810be3f5db0fe3b516690ac0cae1f756f81f8")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0x35, 0x8e, 0x9e, 0x5d, 0x46, 0x4e, 0x19, 0xb7, 0x96, 0x7, 0x46, 0xca, 0x62, 0x7d, 0x19, 0x3f, 0x4d, 0x3e, 0xc0, 0xa8, 0x4c, 0xce, 0xac, 0xf6, 0x92, 0x29, 0xc, 0xe6, 0x90, 0x3f, 0xd8, 0x38, 0x8d, 0x69, 0x9b, 0x11, 0x39, 0xbb, 0x84, 0x3e, 0x1b, 0x3, 0xac, 0x5e, 0x15, 0x3f, 0x49, 0x5b, 0x16, 0x3f, 0xa6, 0xcd, 0x8f, 0xc9, 0x4d, 0xdc, 0x9f, 0xc2, 0x79, 0xf8, 0x5, 0x2a, 0xef, 0x20, 0x32, 0xfa, 0xaf, 0x50, 0x57, 0x6c, 0x30, 0xb6, 0xab, 0x22, 0x2f, 0xe4, 0x6f, 0x62, 0x10, 0x4a, 0x5b, 0x3f, 0x82, 0xca, 0x69, 0xc1, 0xfb, 0x82
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "B3PFHIOwDc+Afia3/w7QkhjICvow1kPo7NKX5Ip9cbr5fUDI3eFS8vtlv+oVS4fFEGaKYkfvyFBokvhF9vu3Ng==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x4f, 0xdf, 0xf8, 0x28, 0x3a, 0x32, 0x33, 0xf9, 0xff, 0x1, 0xb, 0xb9, 0x34, 0x39, 0x4c, 0x68, 0x53, 0x7b, 0xda, 0xc0, 0x11, 0xc2, 0xf1, 0x92, 0xe1, 0x3e, 0x6, 0xa0, 0xc0, 0x61, 0xee, 0x34, 0x8d, 0x17, 0xe7, 0x7e
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "8b6345e9-ef20-4d12-96d7-0ae1a5fc7077")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x3, 0xcf, 0xbb, 0x7e
        ]
        XCTAssertTrue(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x11, 0xdc, 0xa2, 0x68, 0x6b
        ]
        XCTAssertFalse(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x43, 0x8f
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0x5, 0xd8, 0xaf, 0x77, 0x51, 0x23, 0x3a, 0xa9, 0xbf, 0x3b, 0x1e, 0xe3, 0x65, 0x70, 0x1
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }

    func test_decodeEnvVarFromDotfile_withDollarSign__andEscaped_andNoQuotes_shouldDecode() {
        XCTAssertEqual(globalSecrets.secretWithDollarSignEscapedAndAndNoQuotesKey, "real_$lim_shady")
    }

    func test_decodeEnvVarFromDotfile_withDollarSign__andEscaped_andDoubleQuotes_shouldDecode() {
        XCTAssertEqual(globalSecrets.secretWithDollarSignEscapedAndDoubleQuoteKey, "real_$lim_shady")
    }

    func test_decodeEnvVarFromDotfile_withDollarSign__andNotEscaped_andSingleQuotes_shouldDecode() {
        XCTAssertEqual(globalSecrets.secretWithDollarSignNotEscapedAndSingleQuoteKey, "real_$lim_shady")
    }

    func test_decodeEnvVarFromDotfile_withDollarSign__andNotEscaped_andDoubleQuotes_shouldDecodeWithUnexpectedValue() {
        XCTAssertNotEqual(globalSecrets.secretWithDollarSignNotEscapedAndDoubleQuotesKey, "real_$lim_shady")
    }

    func test_decodeEnvVarFromDotfile_withDollarSign__andNotEscaped_andNoQuotes_shouldDecodeWithUnexpectedValue() {
        XCTAssertNotEqual(globalSecrets.secretWithDollarSignNotEscapedAndNoQuotesKey, "real_$lim_shady")
    }

    func test_decodeEnvVarFromDotfile_withWeirdCharacters_shouldDecode() {
        XCTAssertEqual(globalSecrets.secretWithWeirdCharactersKey, "` ~ ! @ # % ^ & * ( ) _ - + = { [ } } | : ; ' < , > . ? /")
    }
}
