// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces

public enum ArkanaKeys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0x77, 0xbd, 0xce, 0x1b, 0xe, 0x7, 0x56, 0xc0, 0xd2, 0x64, 0x6d, 0x8b, 0x4, 0x14, 0x78, 0xc, 0x62, 0x49, 0xf7, 0xf9, 0x27, 0xa6, 0xc6, 0xbf, 0xd1, 0x5f, 0x63, 0x91, 0xa1, 0x54, 0x88, 0x57, 0xba, 0x27, 0xd0, 0x49, 0xc, 0xf2, 0xf4, 0x7, 0x78, 0x61, 0xde, 0x6b, 0x73, 0x6a, 0xd, 0x12, 0x25, 0x5a, 0xe0, 0x9e, 0xb7, 0xbf, 0x39, 0xb0, 0xe9, 0xe9, 0x16, 0xae, 0x56, 0x1e, 0x89, 0x66
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension ArkanaKeys {
    struct Global: ArkanaKeysGlobalProtocol {
        public init() {}
    }
}

public extension ArkanaKeys {
    struct Staging: ArkanaKeysEnvironmentProtocol {
        public init() {}

        @inline(__always)
        public let clientId: String = {
            let encoded: [UInt8] = [
                0x24, 0xf8, 0x9a, 0x3b, 0x57, 0x48, 0x3, 0x92, 0xf2, 0x32, 0x2c, 0xc7, 0x51, 0x51, 0x58, 0x44, 0x27, 0x1b, 0xb2
            ]
            return ArkanaKeys.decode(encoded: encoded, cipher: ArkanaKeys.salt)
        }()

        @inline(__always)
        public let clientSecret: String = {
            let encoded: [UInt8] = [
                0x24, 0xf8, 0x9a, 0x3b, 0x57, 0x48, 0x3, 0x92, 0xf2, 0x32, 0x2c, 0xc7, 0x51, 0x51, 0x58, 0x44, 0x27, 0x1b, 0xb2
            ]
            return ArkanaKeys.decode(encoded: encoded, cipher: ArkanaKeys.salt)
        }()
    }
}
public extension ArkanaKeys {
    struct Release: ArkanaKeysEnvironmentProtocol {
        public init() {}

        @inline(__always)
        public let clientId: String = {
            let encoded: [UInt8] = [
                0x24, 0xf8, 0x9a, 0x3b, 0x57, 0x48, 0x3, 0x92, 0xf2, 0x32, 0x2c, 0xc7, 0x51, 0x51, 0x58, 0x44, 0x27, 0x1b, 0xb2
            ]
            return ArkanaKeys.decode(encoded: encoded, cipher: ArkanaKeys.salt)
        }()

        @inline(__always)
        public let clientSecret: String = {
            let encoded: [UInt8] = [
                0x24, 0xf8, 0x9a, 0x3b, 0x57, 0x48, 0x3, 0x92, 0xf2, 0x32, 0x2c, 0xc7, 0x51, 0x51, 0x58, 0x44, 0x27, 0x1b, 0xb2
            ]
            return ArkanaKeys.decode(encoded: encoded, cipher: ArkanaKeys.salt)
        }()
    }
}
