# frozen_string_literal: true

require './Constants/Constants'
require './Constants/Environments'
require './Managers/VersioningManager'
require './Managers/BuildManager'
require './Managers/SymbolManager'
require './Managers/DistributionManager'
require './Managers/MatchManager'
require './Managers/TestManager'

test_manager = TestManager.new(
  fastlane: self,
  device: Constants.DEVICE,
  output_directory: Constants.TEST_OUTPUT_DIRECTORY_PATH
)

versioning_manager = VersioningManager.new(
  fastlane: self,
  project_path: Constants.PROJECT_PATH,
  main_target_name: Constants.MAIN_TARGET_NAME
)

builder = BuildManager.new(fastlane: self)

distribution_manager = DistributionManager.new(
  fastlane: self,
  build_path: Constants.BUILD_PATH,
  firebase_token: Environments.FIREBASE_CLI_TOKEN
)

match_manager = MatchManager.new(
  fastlane: self,
  keychain_name: Constants.KEYCHAIN_NAME,
  keychain_password: Constants.KEYCHAIN_PASSWORD,
  is_ci: Environments.CI
)

before_all do
  ensure_bundle_exec
end

default_platform(:ios)

platform :ios do

  # Testing

  desc 'Build and Test'
  lane :build_and_test do
    test_manager.build_and_test(
      scheme: Constants.TESTS_SCHEME,
      targets: [Constants.TESTS_TARGET, Constants.UI_TESTS_TARGET]
    )
  end

  # Code Sign

  desc 'Sync Adhoc match signing'
  lane :sync_adhoc_signing do
    match_manager.sync_adhoc_signing(app_identifier: [Constants.BUNDLE_ID_STAGING])
  end

  desc 'Sync Adhoc Production match signing'
  lane :sync_adhoc_production_signing do
    match_manager.sync_adhoc_signing(app_identifier: [Constants.BUNDLE_ID_PRODUCTION])
  end

  desc 'Sync AppStore match signing'
  lane :sync_appstore_signing do
    match_manager.sync_app_store_signing(app_identifier: [Constants.BUNDLE_ID_PRODUCTION])
  end

  desc 'Register new devices'
  lane :register_new_device do
    device_name = prompt(text: 'Enter the device name: ')
    device_udid = prompt(text: 'Enter the device UDID: ')
    device_hash = {}
    device_hash[device_name] = device_udid
    register_devices(devices: device_hash)
    match(force: true)
  end

  # Firebase

  desc 'Build and upload staging app to Firebase'
  lane :build_and_upload_staging_app do
    set_app_version
    bump_build

    builder.build_ad_hoc(
      Constants.SCHEME_NAME_STAGING,
      Constants.PRODUCT_NAME_STAGING,
      Constants.BUNDLE_ID_STAGING
    )
    upload_build_to_firebase(
      product_name: Constants.PRODUCT_NAME_PRODUCTION,
      firebase_app_id: Constants.FIREBASE_APP_ID_PRODUCTION,
      tester_groups: Constants.FIREBASE_TESTER_GROUPS
    )
    upload_build_dsym_to_firebase(
      product_name: Constants.PRODUCT_NAME_PRODUCTION,
      gsp_name: Constants.GSP_PRODUCTION
    )
  end

  desc 'Build and upload Production app to Firebase'
  lane :build_and_upload_production_app do
    set_app_version
    bump_build
    builder.build_ad_hoc(
      Constants.SCHEME_NAME_PRODUCTION,
      Constants.PRODUCT_NAME_PRODUCTION,
      Constants.BUNDLE_ID_PRODUCTION
    )
    upload_build_to_firebase(
      product_name: Constants.PRODUCT_NAME_PRODUCTION,
      firebase_app_id: Constants.FIREBASE_APP_ID_PRODUCTION,
      tester_groups: Constants.FIREBASE_TESTER_GROUPS
    )
    upload_build_dsym_to_firebase(
      product_name: Constants.PRODUCT_NAME_PRODUCTION,
      gsp_name: Constants.GSP_PRODUCTION
    )
  end

  desc 'upload develop build to Firebase app distribution'
  private_lane :upload_build_to_firebase do |options|
    release_notes = "#{options[:product_name]} #{versioning_manager.version_and_build_number}"
    distribution_manager.upload_to_firebase(
      product_name: options[:product_name],
      firebase_app_id: options[:firebase_app_id],
      tester_groups: options[:tester_groups],
      notes: release_notes
    )
  end

  desc 'upload build dsym to Firebase'
  private_lane :upload_build_dsym_to_firebase do |options|
    symbol_manager = SymbolManager.new(
      fastlane: self,
      version: versioning_manager.version_number,
      build_number: versioning_manager.build_number,
      build_path: Constants.BUILD_PATH,
      gsp_directory: Constants.GSP_DIRECTORY,
      binary_path: Constants.BINARY_PATH
    )

    symbol_manager.upload_built_symbol_to_firebase(
      product_name: options[:product_name],
      gsp_name: options[:gsp_name]
    )
  end

  # AppStore

  desc 'Build and upload Production app to App Store'
  lane :build_and_upload_appstore_app do
    set_app_version
    bump_build
    builder.build_app_store(
      Constants.SCHEME_NAME_PRODUCTION,
      Constants.PRODUCT_NAME_PRODUCTION,
      Constants.BUNDLE_ID_PRODUCTION,
      true
    )
    set_connect_api_key if is_ci
    upload_build_to_appstore
    upload_build_dsym_to_firebase(
      product_name: Constants.PRODUCT_NAME_PRODUCTION,
      gsp_name: Constants.GSP_PRODUCTION
    )
  end

  desc 'upload develop build to App Store'
  private_lane :upload_build_to_appstore do
    distribution_manager.upload_to_app_store_connect(
      product_name: Constants.PRODUCT_NAME_PRODUCTION,
      bundle_identifier: Constants.BUNDLE_ID_PRODUCTION
    )
  end

  desc 'set App Store Connect API Key'
  private_lane :set_connect_api_key do
    app_store_connect_api_key(
      key_id: Constants.APP_STORE_KEY_ID,
      issuer_id: Constants.APP_STORE_ISSUER_ID,
      key_content: Environments.APPSTORE_CONNECT_API_KEY || ''
    )
  end

  # Private helper lanes

  desc 'check if any specific version number in build environment'
  private_lane :set_app_version do
    # Set up env var MANUAL_VERSION if we need to override the version number
    if (Environments.MANUAL_VERSION || '') != ''
      increment_version_number(
        version_number: Environments.MANUAL_VERSION
      )
    end
  end

  desc 'set build number with number of commits'
  private_lane :bump_build do
    increment_build_number(
      build_number: number_of_commits,
      xcodeproj: Constants.PROJECT_PATH
    )
  end

  # Utilities

  desc 'Clean up derived data'
  lane :clean_up do
    clear_derived_data(derived_data_path: Constants.DERIVED_DATA_PATH)
  end

  desc 'Clean up xcov output'
  lane :clean_up_xcov do
    clear_derived_data(derived_data_path: Constants.XCOV_OUTPUT_DIRECTORY_PATH)
  end
end
