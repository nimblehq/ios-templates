# frozen_string_literal: true

require './Constants/Constants'
require './Managers/VersioningManager'
require './Managers/BuildManager'
require './Managers/SymbolManager'
require './Managers/DistributionManager'

versioning_manager = VersioningManager.new(
  fastlane: self,
  project_path: Constants.PROJECT_PATH,
  main_target_name: Constants.MAIN_TARGET_NAME
)

builder = BuildManager.new(
  fastlane: self,
  scheme_name_staging: Constants.SCHEME_NAME_STAGING,
  scheme_name_production: Constants.SCHEME_NAME_PRODUCTION,
  scheme_name_appstore: Constants.SCHEME_NAME_APP_STORE,
  bundle_identifier_staging: Constants.BUNDLE_ID_STAGING,
  product_name_staging: Constants.PRODUCT_NAME_STAGING,
  product_name_staging_test_flight: Constants.PRODUCT_NAME_STAGING_TEST_FLIGHT,
  product_name_production: Constants.PRODUCT_NAME_PRODUCTION
)

distribution_manager = DistributionManager.new(
  fastlane: self,
  build_path: Constants.BUILD_PATH,
  firebase_token: ENV['FIREBASE_CLI_TOKEN']
)

keychain_name = "github_action_keychain"
keychain_password = "password"

before_all do
  ensure_bundle_exec
end

default_platform(:ios)

platform :ios do

  desc "Sync development match signing"
  lane :sync_development_signing do
    match(type: "development", readonly: true)
  end

  desc "Sync AdHoc match signing"
  lane :sync_adhoc_signing do
    match(type: "adhoc", readonly: true)
  end

  desc "Sync Adhoc match signing on CI"
  lane :sync_adhoc_signing_ci do
    create_ci_keychain
    match(
        type: "adhoc",
        keychain_name: keychain_name,
        keychain_password: keychain_password,
        app_identifier: [Constants.BUNDLE_ID_STAGING],
        readonly: true
    )
  end

  desc "Sync Adhoc Production match signing on CI"
  lane :sync_adhoc_production_signing_ci do
    create_keychain(
        name: keychain_name,
        password: keychain_password,
        default_keychain: true,
        unlock: true,
        timeout: 3600,
        lock_when_sleeps: false
    )

    match(
        type: "adhoc",
        keychain_name: keychain_name,
        keychain_password: keychain_password,
        app_identifier: [Constants.BUNDLE_ID_PRODUCTION],
        readonly: true
    )
  end

  desc "Sync AppStore match signing on CI"
  lane :sync_appstore_signing_ci do
    create_ci_keychain
    match(
        type: "appstore",
        keychain_name: keychain_name,
        keychain_password: keychain_password,
        readonly: true
    )
  end

  desc "Register new devices"
  lane :register_new_device do
    device_name = prompt(text: "Enter the device name: ")
    device_udid = prompt(text: "Enter the device UDID: ")
    device_hash = {}
    device_hash[device_name] = device_udid
    register_devices(devices: device_hash)
    match(force: true)
  end

  # Deploy

  desc 'build develop build'
  lane :build_develop do
    builder.build_develop
  end

  #Firebase

  desc 'Build and upload staging app to firebase'
  lane :build_and_upload_staging_app do
    ENV['PRODUCT_NAME'] = Constants.PRODUCT_NAME_STAGING
    ENV['FIREBASE_APP_ID'] = Constants.FIREBASE_APP_ID_STAGING
    ENV['GSP_NAME'] = Constants.GSP_STAGING

    set_app_version
    bump_build
    
    builder.build_app_ad_hoc(
      Constants.SCHEME_NAME_STAGING, 
      Constants.PRODUCT_NAME_STAGING,
      Constants.BUNDLE_ID_STAGING
    )
    upload_build_to_firebase
    upload_build_dsym_to_firebase
  end

  desc 'Build and upload Production app to firebase'
  lane :build_and_upload_production_app do
    ENV['PRODUCT_NAME'] = Constants.PRODUCT_NAME_PRODUCTION
    ENV['FIREBASE_APP_ID'] = Constants.FIREBASE_APP_ID_PRODUCTION
    ENV['GSP_NAME'] = Constants.GSP_PRODUCTION
    ENV['TESTER_GROUPS'] = Constants.FIREBASE_TESTER_GROUPS

    set_app_version
    bump_build
    builder.build_app_ad_hoc(
      Constants.SCHEME_NAME_PRODUCTION, 
      Constants.PRODUCT_NAME_PRODUCTION, 
      Constants.BUNDLE_ID_PRODUCTION
    )
    upload_build_to_firebase
    upload_build_dsym_to_firebase
  end

  desc 'upload develop build to firebase app distribution'
  lane :upload_build_to_firebase do |options|
    release_notes = "#{ENV['PRODUCT_NAME']} #{versioning_manager.version_and_build_number}"
    distribution_manager.upload_to_firebase(
      product_name: ENV['PRODUCT_NAME'],
      firebase_app_id: ENV['FIREBASE_APP_ID'],
      tester_groups: Constants.FIREBASE_TESTER_GROUPS,
      notes: release_notes
    )
  end

  desc 'upload build dsym to firebase'
  lane :upload_build_dsym_to_firebase do |options|
    symbol_manager = SymbolManager.new(
      fastlane: self,
      version: versioning_manager.version_number,
      build_number: versioning_manager.build_number,
      build_path: Constants.BUILD_PATH,
      gsp_Odirectory: Constants.GSP_DIRECTORY,
      binary_path: Constants.BINARY_PATH
    )
    
    symbol_manager.upload_built_symbol_to_firebase(
      product_name: ENV['PRODUCT_NAME'],
      gsp_name: ENV['GSP_NAME']
    )
  end

  #AppStore

  desc 'Build and upload Production app to appstore'
  lane :build_and_upload_appstore_app do
    ENV['PRODUCT_NAME'] = Constants.PRODUCT_NAME_PRODUCTION
    ENV['GSP_NAME'] = Constants.GSP_PRODUCTION
    set_app_version
    bump_build
    builder.build_appstore
    if is_ci
      set_connect_api_key
    end
    upload_build_to_appstore
    upload_build_dsym_to_firebase
  end

  desc 'upload develop build to AppStore'
  lane :upload_build_to_appstore do |options|
    distribution_manager.upload_to_appstore_connect(
      product_name: Constants.PRODUCT_NAME_PRODUCTION,
      bundle_identifier: Constants.BUNDLE_ID_PRODUCTION
    )
  end

  desc 'set App Store Connect API Key'
  private_lane :set_connect_api_key do
    app_store_connect_api_key(
      key_id: Constants.APP_STORE_KEY_ID,
      issuer_id: Constants.APP_STORE_ISSUER_ID,
      key_content: ENV.fetch('APPSTORE_CONNECT_API_KEY', '')
    )
  end

  #Private helper lanes

  desc 'create keychain for CI (Github Action)'
  private_lane :create_ci_keychain:
    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false
  )
  end

  desc 'check if any specific version number in build environment'
  private_lane :set_app_version do
    # Set up env var MANUAL_VERSION if we need to override the version number
    if ENV.fetch('MANUAL_VERSION', '') != ''
      increment_version_number(
        version_number: ENV['MANUAL_VERSION']
      )
    end
  end

  desc 'set build number with number of commits'
  private_lane :bump_build do
    increment_build_number(
      build_number: number_of_commits,
      xcodeproj: Constants.PROJECT_PATH
    )
  end

end